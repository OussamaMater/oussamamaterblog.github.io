{"componentChunkName":"component---src-templates-blog-post-js","path":"/overthewire/","result":{"data":{"site":{"siteMetadata":{"title":"Personal Blog"}},"markdownRemark":{"id":"1c8060cd-5e09-5313-ae89-4afb4f93fc7d","excerpt":"This is a guide that helps you through the challenges, so you can follow up and actually do the challenges, so no passwords will be provided. Level…","html":"<p><em>This is a guide that helps you through the challenges, so you can follow up and actually do the challenges, so no passwords will be provided.</em></p>\n<h2>Level 0</h2>\n<h3>Explanation</h3>\n<p>The goal of this challenge is to connect to the provided server via ssh.\r\n<br>\nTo be able to use ssh you will always need 3 things:</p>\n<ol>\n<li>The server's ip</li>\n<li>The username</li>\n<li>The password</li>\n</ol>\n<p>so the command will be structured this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh username@ip</code></pre></div>\n<p>ssh uses 22 as a default port, but sometimes the administrator may change it, if that's the case, you'll have to provide it.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> bandit0@bandit.labs.overthewire.org <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2220</span>\r\n<span class=\"token comment\"># use bandit0 as a password as well</span></code></pre></div>\n<h2>Level 0 → 1</h2>\n<h3>Explanation</h3>\n<p>Now that you are inside the challenge server we can start solving these challenges.\r\n<br>\nSolving a challenge will give you the password of the next user, this way you can keep levelling up.\r\n<br>\nFor this challenge, the password is stored in a file \"readme\" in the home directory of bandit0 user.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit0@bandit:~$ <span class=\"token function\">ls</span>\r\nreadme\r\nbandit0@bandit:~$ <span class=\"token function\">cat</span> readme \r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n</code></pre></div>\n<h2>Level 1 → 2</h2>\n<h3>Explanation</h3>\n<p>This challenge is similar to the previous one, but with a twist.\r\n<br>\nThe \"cat\" command is not always used to echo out files content, it has different usages, so for instance if no filename is provided or the filename is \"-\" it will read from the stdin instead.\r\n<br>\n<a href=\"https://linuxize.com/post/linux-cat-command/\">Read More - Article</a>\r\n<br>\n<a href=\"https://unix.stackexchange.com/questions/16357/usage-of-dash-in-place-of-a-filename\">Read More - Discussion</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit1@bandit:~$ <span class=\"token function\">ls</span>\r\n-\r\nbandit1@bandit:~$ ./- <span class=\"token comment\"># or use the full path</span>\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n</code></pre></div>\n<h2>Level 2 → 3</h2>\n<h3>Explanation</h3>\n<p>Yet, so similar to the previous challenges, you need to echo out the content of a file, but the filename is special, kind of, in our case it has spaces, so you can't provide it as an argument to the \"cat\" command, as it will be look for the files \"spaces\", \"in\", \"this\", \"filename\".\r\n<br>\nTo solve this challenge we need to <em>escape</em> the character space.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit2@bandit:~$ <span class=\"token function\">ls</span>\r\nspaces <span class=\"token keyword\">in</span> this filename\r\nbandit2@bandit:~$ <span class=\"token function\">cat</span> spaces<span class=\"token punctuation\">\\</span> in<span class=\"token punctuation\">\\</span> this<span class=\"token punctuation\">\\</span> filename\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n</code></pre></div>\n<h2>Level 3 → 4</h2>\n<h3>Explanation</h3>\n<p>In this challenge we need to change directory and list <em>all</em> the files.\r\n<br>\nIn Linux and Unix systems, the files starting with . (a dot) are hidden files.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit3@bandit:~$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\r\ntotal <span class=\"token number\">4</span>\r\ndrwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> inhere\r\nbandit3@bandit:~$ <span class=\"token builtin class-name\">cd</span> inhere\r\nbandit3@bandit:~/inhere$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span>\r\ntotal <span class=\"token number\">12</span>\r\ndrwxr-xr-x <span class=\"token number\">2</span> root    root    <span class=\"token number\">4096</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> <span class=\"token builtin class-name\">.</span>\r\ndrwxr-xr-x <span class=\"token number\">3</span> root    root    <span class=\"token number\">4096</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> <span class=\"token punctuation\">..</span>\r\n-rw-r----- <span class=\"token number\">1</span> bandit4 bandit3   <span class=\"token number\">33</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> .hidden\r\nbandit3@bandit:~$ <span class=\"token function\">cat</span> .hidden\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n</code></pre></div>\n<h2>Level 4 → 5</h2>\n<h3>Explanation</h3>\n<p>Same as the previous challenge we need to change the directory, but once we do it, we are granted 9 files, one of which contains the password.\r\n<br>\nThe hint states that the file we are looking for is human-readable (text), so we need to perform a simple check against all the files using the \"file\" command.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit4@bandit:~$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\r\ntotal <span class=\"token number\">4</span>\r\ndrwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> inhere\r\nbandit4@bandit:~$ <span class=\"token builtin class-name\">cd</span> inhere\r\nbandit4@bandit:~/inhere$ <span class=\"token function\">file</span> ./* <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> <span class=\"token comment\"># there is no need for the grep in this level.</span>\r\n./-file07: ASCII text\r\nbandit4@bandit:~/inhere$ <span class=\"token function\">cat</span> ./-file07\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 5 → 6</h2>\n<h3>Explanation</h3>\n<p>In this challenge, we are granted 20 directories, each directory has multiple files, making it impossible to inspect the content of every file one by one, and only one out of these files has the password.\r\n<br>\nThe file we are looking for has some unique properties:</p>\n<ol>\n<li>human-readable</li>\n<li>1033 bytes in size</li>\n<li>not executable</li>\n</ol>\n<p>We can use the \"find\" command and get it easily.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit5@bandit:~$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\r\ntotal <span class=\"token number\">4</span>\r\ndrwxr-x--- <span class=\"token number\">22</span> root bandit5 <span class=\"token number\">4096</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> inhere\r\nbandit5@bandit:~$ <span class=\"token builtin class-name\">cd</span> inhere\r\nbandit5@bandit:~/inhere$ <span class=\"token function\">ls</span> \r\nmaybehere00  maybehere03  maybehere06  maybehere09  maybehere12  maybehere15  maybehere18\r\nmaybehere01  maybehere04  maybehere07  maybehere10  maybehere13  maybehere16  maybehere19\r\nmaybehere02  maybehere05  maybehere08  maybehere11  maybehere14  maybehere17\r\nbandit5@bandit:~/inhere$ <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-readable</span> <span class=\"token parameter variable\">-size</span> 1033c <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-executable</span>\r\n./maybehere07/.file2\r\nbandit5@bandit:~/inhere$ <span class=\"token function\">cat</span> ./maybehere07/.file2\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 6 → 7</h2>\n<h3>Explanation</h3>\n<p>Similar to the previous challenge, we need to look for a file, but this time, across the system, the file has these unique properties:</p>\n<ol>\n<li>owned by user bandit7</li>\n<li>owned by group bandit6</li>\n<li>33 bytes in size</li>\n</ol>\n<p>The \"find\" command for the rescue!</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit6@bandit:~$ <span class=\"token function\">ls</span>\r\nbandit6@bandit:~$ <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-user</span> bandit7 <span class=\"token parameter variable\">-group</span> bandit6 <span class=\"token parameter variable\">-size</span> 33c <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\r\n/var/lib/dpkg/info/bandit7.password\r\nbandit6@bandit:~$ <span class=\"token function\">cat</span> /var/lib/dpkg/info/bandit7.password\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 7 → 8</h2>\n<h3>Explanation</h3>\n<p>This challenge requires us to filter a big text file by grabbing a specific word.\r\n<br>\nThe \"grep\" command is suitable for the job.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit7@bandit:~$ <span class=\"token function\">ls</span>\r\ndata.txt\r\nbandit7@bandit:~$ <span class=\"token function\">cat</span> data.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"millionth\"</span>\r\nmillionth       <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\nbandit7@bandit:~$\r\n\r\n</code></pre></div>\n<h2>Level 8 → 9</h2>\n<h3>Explanation</h3>\n<p>Similar to the previous challenge, we need to filter a big text file, the line we are looking for is the only line that occurs once, so we need to remove all the duplicates and echo out the content.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit8@bandit:~$ <span class=\"token function\">ls</span>\r\ndata.txt\r\nbandit8@bandit:~$ <span class=\"token function\">sort</span> data.txt <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-u</span>\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 9 → 10</h2>\n<h3>Explanation</h3>\n<p>Still the same style as the previous one, to get the password we need to do some kind of filtering.\r\n<br>\nIn this challenge, the password we are looking for is in one of the few <em>human-readable</em> strings, preceded by several = characters.\r\n<br>\nWe will create our first very simple <em>regular expression</em> (a pattern) to get all words preceded by at least one =.\r\n<br>\nRegular Expressions are so interesting and a great skill to have, here are some resources:\r\n<br>\n<a href=\"https://www.linux.com/topic/desktop/introduction-regular-expressions-new-linux-users/\">Read More - Article 1</a>\r\n<br>\n<a href=\"https://ubuntu.com/blog/regex-basics\">Read More - Article 2</a>\r\n<br>\n<a href=\"https://www.geeksforgeeks.org/how-to-use-regular-expressions-regex-on-linux\">Read More - Article 3</a>\r\n<br>\n<a href=\"https://www.youtube.com/watch?v=ZfQFUJhPqMM\">Read More - Video</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit9@bandit:~$ <span class=\"token function\">ls</span>\r\ndata.txt\r\nbandit9@bandit:~$ strings data.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"=.*\"</span>\r\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> the*2i<span class=\"token punctuation\">\\</span>\"4\r\n<span class=\"token operator\">=</span>:G e\r\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> password\r\n<span class=\"token operator\">&lt;</span>I<span class=\"token operator\">=</span>zsGi\r\nZ<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> is\r\n<span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token operator\">|</span>t<span class=\"token operator\">&amp;</span>E\r\n<span class=\"token assign-left variable\">Zdb</span><span class=\"token operator\">=</span>\r\nc^ <span class=\"token assign-left variable\">LAh</span><span class=\"token operator\">=</span>3G\r\n*SF<span class=\"token operator\">=</span>s\r\n<span class=\"token operator\">&amp;</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n<span class=\"token assign-left variable\">S</span><span class=\"token operator\">=</span>A.H<span class=\"token operator\">&amp;</span>^</code></pre></div>\n<h2>Level 10 → 11</h2>\n<h3>Explanation</h3>\n<p>This time, there is no filtering, the challenge is straight forward, all we need to do is decoding the <em>base64</em> text.\r\n<br>\nIf you've never heard about this encoding, or what bases are, I highly recommend reading these articles:\r\n<br>\n<a href=\"https://code.tutsplus.com/tutorials/base-what-a-practical-introduction-to-base-encoding--net-27590\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.base64encoder.io/learn/\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit10@bandit:~$ <span class=\"token function\">ls</span>\r\ndata.txt\r\nbandit10@bandit:~$ <span class=\"token function\">cat</span> data.txt <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span>\r\nThe password is <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 11 → 12</h2>\n<h3>Explanation</h3>\n<p>In this challenge the file content have been rotated by 13 positions, it's a common encryption called <em>rot13</em> which replaces a letter with the 13th etter after it in the alphabet.\r\n<br>\nWe can simply use the \"tr\" command and replace one set of alphabet with another set.\r\n<br>\nI highly recommend reading more about the tr command:\r\n<br>\n<a href=\"https://www.geeksforgeeks.org/tr-command-in-unix-linux-with-examples/\">Read More - Article</a>\r\n<br>\nAnd about the common substitution encryption methods:\r\n<br>\n<a href=\"http://practicalcryptography.com/ciphers/substitution-category/\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit11@bandit:~$ <span class=\"token function\">cat</span> data.txt <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">'A-Za-z'</span> <span class=\"token string\">'N-ZA-Mn-za-m'</span>\r\nThe password is <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 12 → 13</h2>\n<h3>Explanation</h3>\n<p>This task is simple, but so repetitive, we have a Hex Dump that should be reverse engineered to a binary, and we start the decompression journey.\r\n<br>\nNote that in the solution I went quick, to know what decompression you are going for, use the \"file\" command as we learned in the previous challenges.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit12@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussama\r\nbandit12@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp/oussama\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">cp</span> ~/data.txt <span class=\"token builtin class-name\">.</span>\r\nbandit12@bandit:/tmp/oussama$ xxd <span class=\"token parameter variable\">-r</span> data <span class=\"token operator\">></span> binary\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">mv</span> binary binary.gz <span class=\"token comment\"># we need that suffix for the command to work</span>\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">gzip</span> <span class=\"token parameter variable\">-d</span> binary.gz\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">bzip2</span> <span class=\"token parameter variable\">-d</span> binary\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">mv</span> binary.out binary.gz\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">gzip</span> <span class=\"token parameter variable\">-d</span> binary.gz\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> binary\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> data5.bin\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">bzip2</span> <span class=\"token parameter variable\">-d</span> data6.bin <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> data6.bin.out\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">mv</span> data8.bin data8.gz\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">gzip</span> <span class=\"token parameter variable\">-d</span> data8.gz\r\nbandit12@bandit:/tmp/oussama$ <span class=\"token function\">cat</span> data8\r\nThe password is <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 13 → 14</h2>\n<h3>Explanation</h3>\n<p>Well this has to be one of the easiest tasks, as we are given the ssh private key.\r\n<br>\nAll these challenges we've been using the <em>password</em> to login, but this is only an option, as we can use the private key instead, and that's exactly what we've done here.\r\nRead more about the two authentication methods:\r\n<br>\n<a href=\"https://www.appviewx.com/education-center/ssh-authentication-methods/\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit13@bandit:~$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> sshkey.private bandit14@localhost</code></pre></div>\n<h2>Level 14 → 15</h2>\n<h3>Explanation</h3>\n<p>To get the next password, we need to submit the current password to a service running on port 30000.\r\n<br>\nThis can be done by using \"netcat\" command.\r\n<br>\nIf you are planning on playing CTFs I highly recommend learning this command and how it works as it can be so handy.\r\n<br>\n<a href=\"https://linuxize.com/post/netcat-nc-command-with-examples/\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit14@bandit:~$ <span class=\"token function\">cat</span> /etc/bandit_pass/bandit14\r\n<span class=\"token punctuation\">[</span>REDACTED - current password<span class=\"token punctuation\">]</span>\r\nbandit14@bandit:~$ <span class=\"token function\">nc</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">30000</span>\r\n<span class=\"token punctuation\">[</span>REDACTED - current password<span class=\"token punctuation\">]</span> <span class=\"token comment\"># simply paste the bandit14's password and hit enter</span>\r\nCorrect<span class=\"token operator\">!</span>\r\n<span class=\"token punctuation\">[</span>REDACTED - password <span class=\"token keyword\">for</span> the next level<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 15 → 16</h2>\n<h3>Explanation</h3>\n<p>It is almost the same challenge, the only difference is that server running this service is using SSL.\r\n<br>\nYou can read more about SSL here:\r\n<br>\n<a href=\"https://www.websecurity.digicert.com/security-topics/what-is-ssl-tls-https\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit15@bandit:~$ <span class=\"token function\">cat</span> /etc/bandit_pass/bandit15\r\n<span class=\"token punctuation\">[</span>REDACTED - current password<span class=\"token punctuation\">]</span>\r\nbandit15@bandit:~$ ncat <span class=\"token parameter variable\">-C</span> <span class=\"token parameter variable\">--ssl</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">30001</span>\r\n<span class=\"token punctuation\">[</span>REDACTED - current password<span class=\"token punctuation\">]</span>\r\nCorrect<span class=\"token operator\">!</span>\r\n<span class=\"token punctuation\">[</span>REDACTED - password <span class=\"token keyword\">for</span> the next level<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 16 → 17</h2>\n<h3>Explanation</h3>\n<p>This challenge will test what we learned in the previous ones, we need to locate all the services running in a specific range, then connect to each one of them, submit the current password, and get a private key that will eventually help us get the wanted password.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit16@bandit:~$ nmap <span class=\"token parameter variable\">-p</span> <span class=\"token number\">31000</span>-32000 <span class=\"token number\">127.0</span>.0.1\r\nStarting Nmap <span class=\"token number\">7.40</span> <span class=\"token punctuation\">(</span> https://nmap.org <span class=\"token punctuation\">)</span> at <span class=\"token number\">2022</span>-07-04 <span class=\"token number\">11</span>:39 CEST\r\nNmap scan report <span class=\"token keyword\">for</span> localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>\r\nHost is up <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>.00022s latency<span class=\"token punctuation\">)</span>.\r\nNot shown: <span class=\"token number\">996</span> closed ports\r\nPORT      STATE    SERVICE\r\n<span class=\"token number\">31046</span>/tcp <span class=\"token function\">open</span>     unknown\r\n<span class=\"token number\">31518</span>/tcp filtered unknown\r\n<span class=\"token number\">31691</span>/tcp <span class=\"token function\">open</span>     unknown\r\n<span class=\"token number\">31790</span>/tcp <span class=\"token function\">open</span>     unknown\r\n<span class=\"token number\">31960</span>/tcp <span class=\"token function\">open</span>     unknown\r\n\r\nNmap done: <span class=\"token number\">1</span> IP address <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token function\">host</span> up<span class=\"token punctuation\">)</span> scanned <span class=\"token keyword\">in</span> <span class=\"token number\">1.25</span> seconds\r\nbandit16@bandit:~$ <span class=\"token function\">cat</span> /etc/bandit_pass/bandit16 <span class=\"token operator\">|</span> openssl s_client <span class=\"token parameter variable\">-quiet</span> <span class=\"token parameter variable\">-connect</span> <span class=\"token number\">127.0</span>.0.1:31790\r\n<span class=\"token assign-left variable\">depth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> CN <span class=\"token operator\">=</span> localhost\r\nverify error:num<span class=\"token operator\">=</span><span class=\"token number\">18</span>:self signed certificate\r\nverify return:1\r\n<span class=\"token assign-left variable\">depth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> CN <span class=\"token operator\">=</span> localhost\r\nverify return:1\r\nCorrect<span class=\"token operator\">!</span>\r\n-----BEGIN RSA PRIVATE KEY-----\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span>\r\n-----END RSA PRIVATE KEY-----\r\nbandit16@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussama\r\nbandit16@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp/oussama\r\nbandit16@bandit:/tmp/oussama$ <span class=\"token function\">nano</span> id_rsa <span class=\"token comment\"># paste the content and hit ctrl+o then ctrl+x</span>\r\nbandit16@bandit:/tmp/oussama$ <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> id_rsa\r\nbandit16@bandit:/tmp/oussama$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> id_rsa bandit17@localhost\r\nbandit17@bandit:~$ <span class=\"token function\">cat</span> /etc/bandit_pass/bandit17\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 17 → 18</h2>\n<h3>Explanation</h3>\n<p>This challenge is straightforward, we have two files (passwords.old, passwords.new), the password for the next level is in passwords.new and is the only line that has been changed between the two files.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit17@bandit:~$ <span class=\"token function\">diff</span> passwords.old passwords.new\r\n42c42\r\n<span class=\"token operator\">&lt;</span> w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii\r\n---\r\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 18 → 19</h2>\n<h3>Explanation</h3>\n<p>In this challenge we are logged out as soon as we log in, the password is saved in a file called \"readme\" in the home directory, so we can simply echo out the content without connecting.\r\n<br>\nWe are executing commands over ssh, this article can be useful:\r\n<br>\n<a href=\"https://www.cyberciti.biz/faq/unix-linux-execute-command-using-ssh/\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">oussama@oussama:~$ <span class=\"token function\">ssh</span> bandit18@bandit.labs.overthewire.org <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2220</span> <span class=\"token string\">'cat ~/readme'</span>\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit18@bandit.labs.overthewire.orgs password:\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 19 → 20</h2>\n<h3>Explanation</h3>\n<p>In this challenge, we will learn about the \"setuid\" (set user ID) which is a special type of file permission when set a user may execute the binary with a level of access that matches the user who owns the file.\r\n<br>\n<a href=\"https://www.computerhope.com/jargon/s/setuid.htm\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit19@bandit:~$ <span class=\"token function\">ls</span>\r\nbandit20-do\r\nbandit19@bandit:~$ ./bandit20-do\r\nRun a <span class=\"token builtin class-name\">command</span> as another user.\r\n  Example: ./bandit20-do <span class=\"token function\">id</span>\r\nbandit19@bandit:~$ ./bandit20-do <span class=\"token function\">cat</span> /etc/bandit_pass/bandit20\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 20 → 21</h2>\n<h3>Explanation</h3>\n<p>In this challenge we are given a binary that has a setuid (like the previous challenge), this binary needs a port as an argument, it will connect to the service running on that port, reads the current password, if it matches, it will provide the next password.\r\n<br>\nSo we need to create a service that when connected to, provides the current password, and run it in the background so continue using our session.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit20@bandit:~$ <span class=\"token function\">ls</span>\r\nsuconnect\r\nbandit20@bandit:~$ ./suconnect\r\nUsage: ./suconnect <span class=\"token operator\">&lt;</span>portnumber<span class=\"token operator\">></span>\r\nThis program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.\r\nbandit20@bandit:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[REDACTED - Current Password]\"</span> <span class=\"token operator\">|</span> netcat <span class=\"token parameter variable\">-lp</span> <span class=\"token number\">4444</span> <span class=\"token operator\">&amp;</span>\r\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">15831</span>\r\nbandit20@bandit:~$ ./suconnect <span class=\"token number\">4444</span>\r\nRead: <span class=\"token punctuation\">[</span>REDACTED - Current Password<span class=\"token punctuation\">]</span>\r\nPassword matches, sending next password\r\n<span class=\"token punctuation\">[</span>REDACTED - New Password<span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Done <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[REDACTED - Current Password]\"</span> <span class=\"token operator\">|</span> netcat <span class=\"token parameter variable\">-lp</span> <span class=\"token number\">4444</span></code></pre></div>\n<h2>Level 21 → 22</h2>\n<h3>Explanation</h3>\n<p>In this challenge we will get to learn cronjobs, it's a scheduling utility present in unix-like systems.\r\n<br>\nWe need to list the crons, check what scripts are being executed and based on that we can solve the challenge.\r\n<br>\nThis one was straightforward, the cronjob will execute a script to copy the next level password to the \"tmp\" directory and we can simply echo out its content.\r\n<br>\nKnowing how cronjobs work and how to create/configure them is a must-have skill, so here are some resources:\r\n<br>\n<a href=\"https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.freecodecamp.org/news/cron-jobs-in-linux\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit21@bandit:~$ <span class=\"token builtin class-name\">cd</span> /etc/cron.d\r\nbandit21@bandit:/etc/cron.d$ <span class=\"token function\">ls</span>\r\ncronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24\r\ncronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root\r\nbandit21@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> cronjob_bandit22\r\n@reboot bandit22 /usr/bin/cronjob_bandit22.sh <span class=\"token operator\">&amp;></span> /dev/null\r\n* * * * * bandit22 /usr/bin/cronjob_bandit22.sh <span class=\"token operator\">&amp;></span> /dev/null\r\nbandit21@bandit:/etc/cron.d$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /usr/bin/cronjob_bandit22.sh <span class=\"token comment\"># we can execute and read the script, so let's have a look</span>\r\n-rwxr-x--- <span class=\"token number\">1</span> bandit22 bandit21 <span class=\"token number\">130</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> /usr/bin/cronjob_bandit22.sh\r\nbandit21@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> /usr/bin/cronjob_bandit22.sh\r\n<span class=\"token comment\">#!/bin/bash</span>\r\n<span class=\"token function\">chmod</span> <span class=\"token number\">644</span> /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\r\n<span class=\"token function\">cat</span> /etc/bandit_pass/bandit22 <span class=\"token operator\">></span> /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\r\nbandit21@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 22 → 23</h2>\n<h3>Explanation</h3>\n<p>This challenge is very similar to the previous challenge, but with a more complicated script that we need to understand.\r\n<br>\nThe script is copying the password of whoever user executing it to the \"tmp\" directory in a file named the md5 hash of the name, if this makes sense.\r\n<br>\nSo in short, the target is the md5 of the user executing the script.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit22@bandit:~$ <span class=\"token builtin class-name\">cd</span> /etc/cron.d\r\nbandit22@bandit:/etc/cron.d$ <span class=\"token function\">ls</span>\r\ncronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24\r\ncronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root\r\nbandit22@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> cronjob_bandit23\r\n@reboot bandit23 /usr/bin/cronjob_bandit23.sh  <span class=\"token operator\">&amp;></span> /dev/null\r\n* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  <span class=\"token operator\">&amp;></span> /dev/null\r\nbandit22@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> /usr/bin/cronjob_bandit23.sh\r\n<span class=\"token comment\">#!/bin/bash</span>\r\n\r\n<span class=\"token assign-left variable\">myname</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">whoami</span><span class=\"token variable\">)</span></span>\r\n<span class=\"token assign-left variable\">mytarget</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> I am user $myname <span class=\"token operator\">|</span> md5sum <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span>   <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span class=\"token variable\">)</span></span>\r\n\r\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Copying passwordfile /etc/bandit_pass/<span class=\"token variable\">$myname</span> to /tmp/<span class=\"token variable\">$mytarget</span>\"</span>\r\n\r\n<span class=\"token function\">cat</span> /etc/bandit_pass/<span class=\"token variable\">$myname</span> <span class=\"token operator\">></span> /tmp/<span class=\"token variable\">$mytarget</span>\r\nbandit22@bandit:/etc/cron.d$ <span class=\"token builtin class-name\">echo</span> I am user bandit23 <span class=\"token operator\">|</span> md5sum <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span>   <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span>\r\n8ca319486bfbbc3663ea0fbe81326349\r\nbandit22@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> /tmp/8ca319486bfbbc3663ea0fbe81326349\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 23 → 24</h2>\n<h3>Explanation</h3>\n<p>Still with the cronjobs challenges, but this time we need to understand and write our first script.\r\n<br>\nGoing through the script (code in the solution), we can see that it's simply deleting the files of a given directory, in our case \"/var/spool/bandit24\", but if the file is owned by the current user it will be executed, which means we need to create a script that copies the password to somewhere we can read it, like the \"tmp\" directory.\r\n<br>\nSo here are the steps:</p>\n<ol>\n<li>Create a script.</li>\n<li>Make the script executable.</li>\n<li>Create an empty file (where we will be saving our password).</li>\n<li>Make the file <em>writable</em> by \"others\", remember the script will be run as \"bandit24\", so the file permission should be something like xx2, xx3, xx6 or xx7.</li>\n</ol>\n<p>You can read more about file permissions <a href=\"https://www.guru99.com/file-permissions.html\">here</a>.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit23@bandit:~$ <span class=\"token builtin class-name\">cd</span> /etc/cron.d\r\nbandit23@bandit:/etc/cron.d$ <span class=\"token function\">ls</span>\r\ncronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24\r\ncronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root\r\nbandit23@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> cronjob_bandit24\r\n@reboot bandit24 /usr/bin/cronjob_bandit24.sh <span class=\"token operator\">&amp;></span> /dev/null\r\n* * * * * bandit24 /usr/bin/cronjob_bandit24.sh <span class=\"token operator\">&amp;></span> /dev/null\r\nbandit23@bandit:/etc/cron.d$ <span class=\"token function\">cat</span> /usr/bin/cronjob_bandit24.sh\r\n<span class=\"token comment\">#!/bin/bash</span>\r\n\r\n<span class=\"token assign-left variable\">myname</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">whoami</span><span class=\"token variable\">)</span></span>\r\n\r\n<span class=\"token builtin class-name\">cd</span> /var/spool/<span class=\"token variable\">$myname</span>\r\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Executing and deleting all scripts in /var/spool/<span class=\"token variable\">$myname</span>:\"</span>\r\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> * .*<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">do</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"..\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">then</span>\r\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Handling <span class=\"token variable\">$i</span>\"</span>\r\n        <span class=\"token assign-left variable\">owner</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">--format</span> <span class=\"token string\">\"%U\"</span> ./$i<span class=\"token variable\">)</span></span>\"</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">${owner}</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bandit23\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\r\n            <span class=\"token function\">timeout</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">9</span> <span class=\"token number\">60</span> ./<span class=\"token variable\">$i</span> <span class=\"token comment\"># the line we need to focus in</span>\r\n        <span class=\"token keyword\">fi</span>\r\n        <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> ./<span class=\"token variable\">$i</span>\r\n    <span class=\"token keyword\">fi</span>\r\n<span class=\"token keyword\">done</span>\r\nbandit23@bandit:/etc/cron.d$ <span class=\"token function\">mkdir</span> /tmp/oussamalevel24\r\nbandit23@bandit:/etc/cron.d$ <span class=\"token builtin class-name\">cd</span> /tmp/oussamalevel24\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">nano</span> script.sh\r\n<span class=\"token comment\"># the content of the script</span>\r\n<span class=\"token comment\">#!/bin/bash</span>\r\n<span class=\"token function\">cat</span> /etc/bandit_pass/bandit24 <span class=\"token operator\">></span> /tmp/oussamalevel24/bandit24\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">chmod</span> +x script.sh\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">touch</span> bandit24\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">chmod</span> a+w bandit24\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">cp</span> script.sh /var/spool/bandit24\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token comment\"># wait one minute or so</span>\r\nbandit23@bandit:/tmp/oussamalevel24$ <span class=\"token function\">cat</span> bandit24\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 24 → 25</h2>\n<h3>Explanation</h3>\n<p>In this challenge, we need to make another script to create 10000 combinations, so we can <em>brute-force</em> the service running on port 30002.\r\n<br>\nThe service accepts our current password plus a 4-digit pin separated by a space.\r\nExample: bandit24_password 1234\r\n<br>\nBrute forcing is a very common attack that consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly, I highly recommend reading about its techniques and tools here:\r\n<br>\n<a href=\"https://resources.infosecinstitute.com/topic/kali-linux-top-5-tools-for-password-attacks/\">Read More - Article</a>\r\n<br>\n<a href=\"https://geekflare.com/brute-force-attack-tools/\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.tutorialspoint.com/kali_linux/kali_linux_password_cracking_tools.htm\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit24@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussamalevel25\r\nbandit24@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp/oussamalevel25\r\nbandit24@bandit:/tmp/oussamalevel25$ <span class=\"token function\">nano</span> script.sh\r\n<span class=\"token comment\"># paste the script content, we are simply creating all the possible combinations</span>\r\n<span class=\"token comment\">#!/bin/bash</span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>0000<span class=\"token punctuation\">..</span><span class=\"token number\">9999</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\r\n        <span class=\"token comment\"># note the use of >> so append and not overwrite</span>\r\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\"</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">>></span> passwords\r\n<span class=\"token keyword\">done</span>\r\nbandit24@bandit:/tmp/oussamalevel25$ <span class=\"token function\">chmod</span> +x script.sh\r\nbandit24@bandit:/tmp/oussamalevel25$ ./script.sh\r\nbandit24@bandit:/tmp/oussamalevel25$ <span class=\"token function\">cat</span> passwords <span class=\"token operator\">|</span> <span class=\"token function\">nc</span> localhost <span class=\"token number\">30002</span> <span class=\"token operator\">>></span> result\r\nbandit24@bandit:/tmp/oussamalevel25$ <span class=\"token function\">cat</span> result <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'The password'</span>\r\nThe password of user bandit25 is <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 25 → 26</h2>\n<h3>Explanation</h3>\n<p>In this challenge we will need to abuse the \"more\" command.\r\n<br>\nMore command is used to view the text files in the command prompt, displaying one screen at a time in case the file is large, and the key to the challenge is that it will not finish executing as long as there is more content to be displayed.\r\n<br>\nHopefully the solution will make sense.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit25@bandit:~$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\r\ntotal <span class=\"token number\">4</span>\r\n-r-------- <span class=\"token number\">1</span> bandit25 bandit25 <span class=\"token number\">1679</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> bandit26.sshkey\r\nbandit25@bandit:~$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> bandit26.sshkey bandit26@127.0.0.1\r\n<span class=\"token comment\"># Connection closed immediately</span>\r\nbandit25@bandit:~$ <span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"bandit26\"</span>\r\nbandit26:x:11026:11026:bandit level <span class=\"token number\">26</span>:/home/bandit26:/usr/bin/showtext <span class=\"token comment\"># not a regular shell</span>\r\nbandit25@bandit:~$ <span class=\"token function\">cat</span> /usr/bin/showtext <span class=\"token comment\"># let's have a look</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\">#!/bin/sh</span>\r\n\r\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>linux\r\n\r\n<span class=\"token function\">more</span> ~/text.txt <span class=\"token comment\"># we need to find a way not to hit the exit 0</span>\r\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\r\nbandit25@bandit:~$ <span class=\"token comment\"># minimise your terminal so there is always some content for \"more\" to display and this way we won't be exiting the script</span>\r\nbandit25@bandit:~$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> bandit26.sshkey bandit26@127.0.0.1\r\nbandit25@bandit:~$ <span class=\"token comment\"># this time it won't exit, so let's abuse more, by entering vim, hit v</span>\r\nbandit25@bandit:~$ <span class=\"token comment\"># we can use vim to spawn a shell, (make sure you are in command mode by hitting esc) type :set shell=/bin/bash then type :shell, that's it!</span>\r\nbandit26@bandit:~$ <span class=\"token function\">cat</span> /etc/bandit_pass/bandit26\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 26 → 27</h2>\n<h3>Explanation</h3>\n<p>This challenge is pretty easy, we have a binary with that special file permission we discussed \"setuid\", so whenever executed it runs as the next level user, this way we can simply echo out the password.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit26@bandit:~$ <span class=\"token function\">ls</span>\r\nbandit27-do  text.txt\r\nbandit26@bandit:~$ ./bandit27-do\r\nRun a <span class=\"token builtin class-name\">command</span> as another user.\r\n  Example: ./bandit27-do <span class=\"token function\">id</span>\r\nbandit26@bandit:~$ ./bandit27-do <span class=\"token function\">cat</span> /etc/bandit_pass/bandit27\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 27 → 28</h2>\n<h3>Explanation</h3>\n<p>In this challenge, we will practice our git skills, so we are given a remote repository that we need to clone and explore.\r\n<br>\nThis level requires some knowledge of what and how \"git\" works, I highly recommend reading these two articles to get you started:\r\n<br>\n<a href=\"https://www.w3schools.com/git/\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.atlassian.com/git\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit27@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp\r\nbandit27@bandit:/tmp$ <span class=\"token function\">mkdir</span> oussamalevel27\r\nbandit27@bandit:/tmp$ <span class=\"token builtin class-name\">cd</span> oussamalevel27\r\nbandit27@bandit:/tmp/oussamalevel27$ <span class=\"token function\">git</span> clone ssh://bandit27-git@localhost/home/bandit27-git/repo\r\nCloning into <span class=\"token string\">'repo'</span><span class=\"token punctuation\">..</span>.\r\nCould not create directory <span class=\"token string\">'/home/bandit27/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit27/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit27-git@localhost password: <span class=\"token comment\"># same password as bandit27</span>\r\nremote: Counting objects: <span class=\"token number\">3</span>, done.\r\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>/2<span class=\"token punctuation\">)</span>, done.\r\nremote: Total <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, done.\r\nbandit27@bandit:/tmp/oussamalevel27$ <span class=\"token function\">ls</span>\r\nrepo\r\nbandit27@bandit:/tmp/oussamalevel27$ <span class=\"token builtin class-name\">cd</span> repo/\r\nbandit27@bandit:/tmp/oussamalevel27/repo$ <span class=\"token function\">ls</span>\r\nREADME\r\nbandit27@bandit:/tmp/oussamalevel27/repo$ <span class=\"token function\">cat</span> README\r\nThe password to the next level is: <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 28 → 29</h2>\n<h3>Explanation</h3>\n<p>Still practising our git skills, this time we need to go one step back to get the password.\r\n<br>\nThis book will help you understand most of the git commands and the need for each one of them:\r\n<br>\n<a href=\"https://books.goalkicker.com/GitBook/\">Read More - Book</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit28@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp\r\nbandit28@bandit:/tmp$ <span class=\"token function\">mkdir</span> oussamalevel28\r\nbandit28@bandit:/tmp$ <span class=\"token builtin class-name\">cd</span> oussamalevel28\r\nbandit28@bandit:/tmp/oussamalevel28$ <span class=\"token function\">git</span> clone ssh://bandit28-git@localhost/home/bandit28-git/repo\r\nCloning into <span class=\"token string\">'repo'</span><span class=\"token punctuation\">..</span>.\r\nCould not create directory <span class=\"token string\">'/home/bandit28/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit28/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit28-git@localhosts password:\r\nremote: Counting objects: <span class=\"token number\">9</span>, done.\r\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">6</span>/6<span class=\"token punctuation\">)</span>, done.\r\nremote: Total <span class=\"token number\">9</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">9</span>/9<span class=\"token punctuation\">)</span>, done.\r\nResolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>/2<span class=\"token punctuation\">)</span>, done.\r\nbandit28@bandit:/tmp/oussamalevel28$ <span class=\"token builtin class-name\">cd</span> repo/\r\nbandit28@bandit:/tmp/oussamalevel28/repo$ <span class=\"token function\">ls</span>\r\nREADME.md\r\nbandit28@bandit:/tmp/oussamalevel28/repo$ <span class=\"token function\">cat</span> README.md\r\n<span class=\"token comment\"># Bandit Notes</span>\r\nSome notes <span class=\"token keyword\">for</span> level29 of bandit.\r\n\r\n<span class=\"token comment\">## credentials</span>\r\n\r\n- username: bandit29\r\n- password: xxxxxxxxxx\r\n\r\nbandit28@bandit:/tmp/oussamalevel28/repo$ <span class=\"token function\">git</span> log\r\ncommit edd935d60906b33f0619605abd1689808ccdd5ee\r\nAuthor: Morla Porla <span class=\"token operator\">&lt;</span>morla@overthewire.org<span class=\"token operator\">></span>\r\nDate:   Thu May <span class=\"token number\">7</span> <span class=\"token number\">20</span>:14:49 <span class=\"token number\">2020</span> +0200\r\n\r\n    fix info leak\r\n\r\ncommit c086d11a00c0648d095d04c089786efef5e01264\r\nAuthor: Morla Porla <span class=\"token operator\">&lt;</span>morla@overthewire.org<span class=\"token operator\">></span>\r\nDate:   Thu May <span class=\"token number\">7</span> <span class=\"token number\">20</span>:14:49 <span class=\"token number\">2020</span> +0200\r\n\r\n    <span class=\"token function\">add</span> missing data\r\n\r\ncommit de2ebe2d5fd1598cd547f4d56247e053be3fdc38\r\nAuthor: Ben Dover <span class=\"token operator\">&lt;</span>noone@overthewire.org<span class=\"token operator\">></span>\r\nDate:   Thu May <span class=\"token number\">7</span> <span class=\"token number\">20</span>:14:49 <span class=\"token number\">2020</span> +0200\r\n\r\n    initial commit of README.md\r\nbandit28@bandit:/tmp/oussamalevel28/repo$ <span class=\"token function\">git</span> checkout c086d11a00c0648d095d04c089786efef5e01264\r\nNote: checking out <span class=\"token string\">'c086d11a00c0648d095d04c089786efef5e01264'</span><span class=\"token builtin class-name\">.</span>\r\n\r\nYou are <span class=\"token keyword\">in</span> <span class=\"token string\">'detached HEAD'</span> state. You can <span class=\"token function\">look</span> around, <span class=\"token function\">make</span> experimental\r\nchanges and commit them, and you can discard any commits you <span class=\"token function\">make</span> <span class=\"token keyword\">in</span> this\r\nstate without impacting any branches by performing another checkout.\r\n\r\nIf you want to create a new branch to retain commits you create, you may\r\n<span class=\"token keyword\">do</span> so <span class=\"token punctuation\">(</span>now or later<span class=\"token punctuation\">)</span> by using <span class=\"token parameter variable\">-b</span> with the checkout <span class=\"token builtin class-name\">command</span> again. Example:\r\n\r\n  <span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>new-branch-name<span class=\"token operator\">></span>\r\n\r\nHEAD is now at c086d11<span class=\"token punctuation\">..</span>. <span class=\"token function\">add</span> missing data\r\nbandit28@bandit:/tmp/oussamalevel28/repo$ <span class=\"token function\">cat</span> README.md\r\n<span class=\"token comment\"># Bandit Notes</span>\r\nSome notes <span class=\"token keyword\">for</span> level29 of bandit.\r\n\r\n<span class=\"token comment\">## credentials</span>\r\n\r\n- username: bandit29\r\n- password: <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 29 → 30</h2>\n<h3>Explanation</h3>\n<p>Still with the git challenges, this time we will play around with branches.\r\n<br>\nEvery concept is well explained in the book above (previous challenge), but still, if you do want a quick article here is\r\n<a href=\"https://www.atlassian.com/git/tutorials/using-branches\">one</a> and here is an\r\n<a href=\"https://learngitbranching.js.org/\">interactive tutorial</a> as well.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit29@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussamalevel29\r\nbandit29@bandit:~$ <span class=\"token builtin class-name\">cd</span> /tmp/oussamalevel29\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">git</span> clone ssh://bandit29-git@localhost/home/bandit29-git/repo\r\nCloning into <span class=\"token string\">'repo'</span><span class=\"token punctuation\">..</span>.\r\nCould not create directory <span class=\"token string\">'/home/bandit29/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit29/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit29-git@localhosts password:\r\nremote: Counting objects: <span class=\"token number\">16</span>, done.\r\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">11</span>/11<span class=\"token punctuation\">)</span>, done.\r\nremote: Total <span class=\"token number\">16</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">16</span>/16<span class=\"token punctuation\">)</span>, done.\r\nResolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>/2<span class=\"token punctuation\">)</span>, done.\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">ls</span>\r\nREADME.md\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">cat</span> README.md\r\n<span class=\"token comment\"># Bandit Notes</span>\r\nSome notes <span class=\"token keyword\">for</span> bandit30 of bandit.\r\n\r\n<span class=\"token comment\">## credentials</span>\r\n\r\n- username: bandit30\r\n- password: <span class=\"token operator\">&lt;</span>no passwords <span class=\"token keyword\">in</span> production<span class=\"token operator\">!</span><span class=\"token operator\">></span>\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span> <span class=\"token comment\"># listing only the remote branches, you can use -a as well</span>\r\n  origin/HEAD -<span class=\"token operator\">></span> origin/master\r\n  origin/dev\r\n  origin/master\r\n  origin/sploits-dev\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">git</span> checkout dev\r\nBranch dev <span class=\"token builtin class-name\">set</span> up to track remote branch dev from origin.\r\nSwitched to a new branch <span class=\"token string\">'dev'</span>\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">ls</span>\r\ncode  README.md\r\nbandit29@bandit:/tmp/oussamalevel29$ <span class=\"token function\">cat</span> README.md\r\n<span class=\"token comment\"># Bandit Notes</span>\r\nSome notes <span class=\"token keyword\">for</span> bandit30 of bandit.\r\n\r\n<span class=\"token comment\">## credentials</span>\r\n\r\n- username: bandit30\r\n- password: <span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 30 → 31</h2>\n<h3>Explanation</h3>\n<p>Well, we are still doing git challenges, and in this one, we will learn about \"tags\".\r\n<br>\nSometimes, when a commit is an import change, we may want to bookmark it, give it a label/alias, just to mark that progress in code, for example name it \"v1.0\", to do so, we use tags.\r\n<br>\nIn simple words, tags are labels that can be used to identify a specific commit.\r\n<br>\nI highly recommend reading more about tags:\r\n<br>\n<a href=\"https://linuxhint.com/use-git-tags/\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag\">Read More - Article</a>\r\n<br>\n<a href=\"https://www.freecodecamp.org/news/git-tag-explained-how-to-add-remove/\">Read More - Article</a>\r\n<br>\nAnd the book I shared in the previous challenges.</p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit29@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussamalevel30 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$_</span>\r\nbandit30@bandit:/tmp/oussamalevel30$ <span class=\"token function\">git</span> clone ssh://bandit30-git@localhost/home/bandit30-git/repo\r\nCloning into <span class=\"token string\">'repo'</span><span class=\"token punctuation\">..</span>.\r\nCould not create directory <span class=\"token string\">'/home/bandit30/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit30/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit30-git@localhosts password:\r\nremote: Counting objects: <span class=\"token number\">4</span>, done.\r\nremote: Total <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>/4<span class=\"token punctuation\">)</span>, done.\r\nbandit30@bandit:/tmp/oussamalevel30$ <span class=\"token builtin class-name\">cd</span> repo/\r\nbandit30@bandit:/tmp/oussamalevel30/repo$ <span class=\"token function\">git</span> tag\r\nsecret\r\nbandit30@bandit:/tmp/oussamalevel30/repo$ <span class=\"token function\">git</span> show secret\r\n<span class=\"token punctuation\">[</span>REDACTED<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Level 31 → 32</h2>\n<h3>Explanation</h3>\n<p>This is the last \"git\" challenge, we need to push a txt file with a specific name and content.\r\n<br>\nBut, there is a \".gitignore\" file that ignores all txt files, so we need to get rid of it.\r\n<br>\nThis file is really useful in our projects, so maybe read this article:\r\n<br>\n<a href=\"https://www.pluralsight.com/guides/how-to-use-gitignore-file\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bandit31@bandit:~$ <span class=\"token function\">mkdir</span> /tmp/oussamalevel31 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token function\">clear</span>\r\nbandit31@bandit:/tmp/oussamalevel31$ <span class=\"token function\">git</span> clone ssh://bandit31-git@localhost/home/bandit31-git/repo\r\nCloning into <span class=\"token string\">'repo'</span><span class=\"token punctuation\">..</span>.\r\nCould not create directory <span class=\"token string\">'/home/bandit31/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit31/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit31-git@localhosts password:\r\nremote: Counting objects: <span class=\"token number\">4</span>, done.\r\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, done.\r\nremote: Total <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>/4<span class=\"token punctuation\">)</span>, <span class=\"token number\">383</span> bytes <span class=\"token operator\">|</span> <span class=\"token number\">0</span> bytes/s, done.\r\nbandit31@bandit:/tmp/oussamalevel31$ <span class=\"token builtin class-name\">cd</span> repo/\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">ls</span>\r\nREADME.md\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">cat</span> README.md\r\nThis <span class=\"token function\">time</span> your task is to push a <span class=\"token function\">file</span> to the remote repository.\r\n\r\nDetails:\r\n    File name: key.txt\r\n    Content: <span class=\"token string\">'May I come in?'</span>\r\n    Branch: master\r\n\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">cat</span> .gitignore\r\n*.txt\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">rm</span> .gitignore\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'May I come in?'</span> <span class=\"token operator\">></span> key.txt\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'Added key.txt'</span>\r\n<span class=\"token punctuation\">[</span>master f312353<span class=\"token punctuation\">]</span> Added key.txt\r\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, <span class=\"token number\">1</span> deletion<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span>\r\n delete mode <span class=\"token number\">100644</span> .gitignore\r\n create mode <span class=\"token number\">100644</span> key.txt\r\nbandit31@bandit:/tmp/oussamalevel31/repo$ <span class=\"token function\">git</span> push origin master\r\nCould not create directory <span class=\"token string\">'/home/bandit31/.ssh'</span><span class=\"token builtin class-name\">.</span>\r\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'localhost (127.0.0.1)'</span> cant be established.\r\nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.\r\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? <span class=\"token function\">yes</span>\r\nFailed to <span class=\"token function\">add</span> the <span class=\"token function\">host</span> to the list of known hosts <span class=\"token punctuation\">(</span>/home/bandit31/.ssh/known_hosts<span class=\"token punctuation\">)</span>.\r\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\r\n\r\nbandit31-git@localhosts password:\r\nCounting objects: <span class=\"token number\">3</span>, done.\r\nDelta compression using up to <span class=\"token number\">2</span> threads.\r\nCompressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>/2<span class=\"token punctuation\">)</span>, done.\r\nWriting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, <span class=\"token number\">289</span> bytes <span class=\"token operator\">|</span> <span class=\"token number\">0</span> bytes/s, done.\r\nTotal <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nremote: <span class=\"token comment\">### Attempting to validate files... ####</span>\r\nremote:\r\nremote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.\r\nremote:\r\nremote: Well done<span class=\"token operator\">!</span> Here is the password <span class=\"token keyword\">for</span> the next level:\r\nremote: <span class=\"token punctuation\">[</span>56a9bf19c63d650ce78e6ec0354ee45e<span class=\"token punctuation\">]</span>\r\nremote:\r\nremote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.\r\nremote:\r\nTo ssh://localhost/home/bandit31-git/repo\r\n <span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>remote rejected<span class=\"token punctuation\">]</span> master -<span class=\"token operator\">></span> master <span class=\"token punctuation\">(</span>pre-receive hook declined<span class=\"token punctuation\">)</span>\r\nerror: failed to push some refs to <span class=\"token string\">'ssh://bandit31-git@localhost/home/bandit31-git/repo'</span></code></pre></div>\n<h2>Level 32 → 33</h2>\n<h3>Explanation</h3>\n<p>This is the last challenge, where we need to escape a special shell that executes any given command as uppercase, and as you know a binary's name is case sensitive, so \"ls\" is different from \"LS\".\r\n<br>\nWell, the idea here is to use something that won't be affected by this conversion.\r\n<br>\nAfter some Googling, I found out that there is a special environment variable that stores the path to the shell so it stores \"/bin/sh\" or \"/bin/bash\" depending on shell being used, so the idea is to pass the \"$0\" and hope it re-executes the shell.\r\n<br>\nSome helpful resources:\r\n<br>\n<a href=\"https://unix.stackexchange.com/questions/280454/what-is-the-meaning-of-0-in-the-bash-shell\">Read More - Discussion</a>\r\n<br>\n<a href=\"https://bash.cyberciti.biz/guide/$0\">Read More - Article</a></p>\n<h3>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">WELCOME TO THE UPPERCASE <span class=\"token environment constant\">SHELL</span>\r\n<span class=\"token operator\">>></span> <span class=\"token function\">ls</span>\r\nsh: <span class=\"token number\">1</span>: LS: not found\r\n<span class=\"token operator\">>></span> <span class=\"token variable\">$0</span>\r\n$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\r\ntotal <span class=\"token number\">8</span>\r\n-rwsr-x--- <span class=\"token number\">1</span> bandit33 bandit32 <span class=\"token number\">7556</span> May  <span class=\"token number\">7</span>  <span class=\"token number\">2020</span> uppershell\r\n$ <span class=\"token function\">whoami</span>\r\nbandit33</code></pre></div>","frontmatter":{"title":"OverTheWire - Bandit","date":"May 01, 2022","description":"Hello! you'll find my solutions to the Bandit challenges with an explanation, hopefully, this helps you if you're struggling."}},"previous":null,"next":{"fields":{"slug":"/laravel-sse/"},"frontmatter":{"title":"Laravel Real-Time Notifications with SSE"}}},"pageContext":{"id":"1c8060cd-5e09-5313-ae89-4afb4f93fc7d","previousPostId":null,"nextPostId":"6a82bf51-e0c6-5680-b686-170bf58fc635"}},"staticQueryHashes":["2841359383","2911190619"],"slicesMap":{}}