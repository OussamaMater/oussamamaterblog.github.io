{"componentChunkName":"component---src-templates-blog-post-js","path":"/php-attributes/","result":{"data":{"site":{"siteMetadata":{"title":"Personal Blog"}},"markdownRemark":{"id":"703fa372-1f8f-5751-b8ee-a3039da0092a","excerpt":"Say Hi to PHP attributes Attributes offer the ability to add structured, machine-readable metadata information on declarations in code: Classes, methodsâ€¦","html":"<h2 id=\"say-hi-to-php-attributes\" style=\"position:relative;\"><a href=\"#say-hi-to-php-attributes\" aria-label=\"say hi to php attributes permalink\" class=\"anchor before\"><svg fill=\"#A855F7\" height=\"25px\" width=\"25px\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n              viewBox=\"0 0 490 490\" xml:space=\"preserve\">\n           <path d=\"M64.333,490h58.401l33.878-137.69h122.259L245.39,490h58.401l33.878-137.69h119.92v-48.162h-108.24l29.2-117.324h79.04\n             v-48.162H390.23L424.108,0H365.31l-33.878,138.661H208.79L242.668,0h-58.415l-33.864,138.661H32.411v48.162h106.298l-28.818,117.324\n             h-77.48v48.162h65.8L64.333,490z M197.11,186.824h122.642l-29.2,117.324H168.292L197.11,186.824z\"/>\n           </svg></a>Say Hi to PHP attributes</h2>\n<div style=\"text-align: center;\">\n    <img src=\"https://i.php.watch/static/p/12/attributes.png\" width=\"650\" height=\"200\" style=\"text-align: center;\">\n</div>\n<blockquote>\n<p>Attributes offer the ability to add structured, machine-readable metadata information on declarations in code: Classes, methods, functions, parameters, properties, and class constants can be the target of an attribute.</p>\n</blockquote>\n<p>I believe the definition is on point, and I'm confident most developers reading this article have encountered attributes at least once. If you haven't, they are essentially metadata added to a class.</p>\n<p>At this point, you might be wondering how they differ from <a href=\"https://phpstan.org/writing-php-code/phpdocs-basics\">PHPDOCs</a> then? Well, they are first-class citizens, they are <strong>actual PHP classes</strong>, and yes I know, it changes the whole game now; you don't have to write <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a> to extract things from the PHPDocs, and you can even maintain some form of state within the properties.</p>\n<p>Since I am a bit late to the party, classic examples of attributes abound. So, why not build something cool with them instead?</p>\n<h2 id=\"making-routes-toggleable\" style=\"position:relative;\"><a href=\"#making-routes-toggleable\" aria-label=\"making routes toggleable permalink\" class=\"anchor before\"><svg fill=\"#A855F7\" height=\"25px\" width=\"25px\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n              viewBox=\"0 0 490 490\" xml:space=\"preserve\">\n           <path d=\"M64.333,490h58.401l33.878-137.69h122.259L245.39,490h58.401l33.878-137.69h119.92v-48.162h-108.24l29.2-117.324h79.04\n             v-48.162H390.23L424.108,0H365.31l-33.878,138.661H208.79L242.668,0h-58.415l-33.864,138.661H32.411v48.162h106.298l-28.818,117.324\n             h-77.48v48.162h65.8L64.333,490z M197.11,186.824h122.642l-29.2,117.324H168.292L197.11,186.824z\"/>\n           </svg></a>Making Routes Toggleable</h2>\n<p>When working with a team, I often receive messages from other developers (frontend guys, I am looking at you), notifying me that a route isn't working as expected. At times, I wish I could easily disable the route for a specific environment, like the staging environment, while maintaining its functionality locally. This way, me and my fellow backend developers can work on it, push code, and maintain our typical workflow without concerns about accidental usage. Occasionally, it's simply a new route that needs to stay exclusive to the testing environment.</p>\n<p>So, pondering this, I thought it would be cool if I could mark an action as disabled or ignored. And guess what? With attributes, this turned out to be super easy, and super clean also.</p>\n<p>Let's start by creating an attribute. I will name mine <code class=\"language-text\">Ignore</code>, and it will have a single property called <code class=\"language-text\">in</code></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Attributes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Attribute</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Attribute</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">Attribute</span><span class=\"token operator\">::</span><span class=\"token constant\">TARGET_CLASS</span> <span class=\"token operator\">|</span> <span class=\"token attribute-class-name class-name\">Attribute</span><span class=\"token operator\">::</span><span class=\"token constant\">TARGET_METHOD</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Ignore</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$in</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'production'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>That's it, you just created an attribute, you will also notice that we've limited its scope to classes and methods, allowing this attribute to be placed exclusively on those two entities.</p>\n<p>Now, we can use it like so</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Attributes<span class=\"token punctuation\">\\</span>Ignore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Response</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TwoFactorQrCodeController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'staging'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Response</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_null</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">two_factor_secret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'svg'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">twoFactorQrCodeSvg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'url'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">twoFactorQrCodeUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>You can see that this already reads well, <em>ignore in production and staging</em>. Still, we need to make this functional, and there are a few methods to achieve this, the simplest is using a middleware.</p>\n<p>Let's create a middleware, I will name it <code class=\"language-text\">IsRouteIgnored</code>, feel free to choose any name you prefer</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">php artisan make<span class=\"token punctuation\">:</span>middleware IsRouteIgnored</code></pre></div>\n<p>Now we can implement the logic, the idea is simple: we intercept the requests of the routes that use this middleware, we then check if the action has the <code class=\"language-text\">Ignore</code> attribute, if it does, we check whether the current environment is permitted to have this route or not.</p>\n<p>For this, we will use the magic of the <a href=\"https://www.php.net/manual/en/book.reflection.php\">Reflection API</a>, let's dive into the code</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ReflectionMethod</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Attributes<span class=\"token punctuation\">\\</span>Ignore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IsRouteIgnored</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Closure</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Response</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$route</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$route</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$route</span><span class=\"token operator\">-></span><span class=\"token property\">action</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uses'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Closure</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$reflection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionMethod</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$route</span><span class=\"token operator\">-></span><span class=\"token function\">getControllerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$route</span><span class=\"token operator\">-></span><span class=\"token function\">getActionMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$attributes</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$reflection</span><span class=\"token operator\">-></span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">Ignore</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'app.env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></code></pre></div>\n<p>We're creating a reflection of the method the route leads to, so we retrieve the <code class=\"language-text\">Ignore</code> attribute. By default, attributes are not repeatable, meaning they can only be used once per entity. Since we've specified our interest solely in the <code class=\"language-text\">Ignore</code> attribute, we will end up with a single-element array.</p>\n<p>We can now instantiate the attribute by calling <code class=\"language-text\">newInstance()</code>, returning to the realm of regular classes. We can then check the environments in which this route should be ignored within the <code class=\"language-text\">in</code> property. In this case, the route will return a <code class=\"language-text\">404</code> response for the production and staging environments but will function in the local and testing environments.</p>\n<p>Afterward, you can register the middleware globally or within the API routes, as you would normally do, and you can start ignoring routes by marking them with the attribute.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg fill=\"#A855F7\" height=\"25px\" width=\"25px\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n              viewBox=\"0 0 490 490\" xml:space=\"preserve\">\n           <path d=\"M64.333,490h58.401l33.878-137.69h122.259L245.39,490h58.401l33.878-137.69h119.92v-48.162h-108.24l29.2-117.324h79.04\n             v-48.162H390.23L424.108,0H365.31l-33.878,138.661H208.79L242.668,0h-58.415l-33.864,138.661H32.411v48.162h106.298l-28.818,117.324\n             h-77.48v48.162h65.8L64.333,490z M197.11,186.824h122.642l-29.2,117.324H168.292L197.11,186.824z\"/>\n           </svg></a>Conclusion</h2>\n<p>With just a few lines of code, we've enabled toggleable routes. While the implementation was relatively basic, the example was meant to showcase the power of attributes. I mean come on, how cool is that? Toggling routes on and off within specific environments of your choice, you can even adjust the <code class=\"language-text\">Ignore</code> attribute to exclude the route from all environments except for the ones you specify, and the options are endless.</p>\n<p>Next time you ponder marking a class as something specific, consider giving Attributes a shot! ðŸª„</p>","frontmatter":{"title":"PHP attributes in Laravel","date":"November 21, 2023","description":"PHP 8 has introduced attributes, which are quite impressive and powerful, in this article will use them to toggle Laravel routes on and off, how cool is that?"}},"previous":{"fields":{"slug":"/laravel-envoy/"},"frontmatter":{"title":"Laravel Envoy - Automate the boring stuff"}},"next":{"fields":{"slug":"/laravel-core-csrf/"},"frontmatter":{"title":"Laravel Under The Hood - CSRF"}}},"pageContext":{"id":"703fa372-1f8f-5751-b8ee-a3039da0092a","previousPostId":"aaeec7b1-0e41-5cf8-bf34-9c2c64edad18","nextPostId":"37a1019d-eebc-5e04-841c-ae70e4179b1d"}},"staticQueryHashes":["2841359383","494442451"],"slicesMap":{}}